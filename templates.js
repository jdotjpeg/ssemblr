document.addEventListener('DOMContentLoaded', function() {
    // Get DOM elements
    const generateBtn = document.getElementById('generateTemplate');
    const configScript = document.getElementById('configScript');
    const templateOutput = document.getElementById('templateOutput');
    const copyBtn = document.getElementById('copyTemplate');
    
    // Password show/hide functionality
    const passwordToggles = [
        { checkbox: 'showEnableSecret', passwordField: 'enableSecret' },
        { checkbox: 'showConsolePassword', passwordField: 'consolePassword' },
        { checkbox: 'showVtyPassword', passwordField: 'vtyPassword' }
    ];
    
    passwordToggles.forEach(item => {
        const checkbox = document.getElementById(item.checkbox);
        const passwordField = document.getElementById(item.passwordField);
        
        if (checkbox && passwordField) {
            checkbox.addEventListener('change', function() {
                passwordField.type = this.checked ? 'text' : 'password';
            });
        }
    });
    
    // Generate configuration template when button is clicked
    generateBtn.addEventListener('click', function() {
        const config = generateConfiguration();
        configScript.value = config;
        templateOutput.style.display = 'block';
        
        // Scroll to the output
        templateOutput.scrollIntoView({ behavior: 'smooth' });
    });
    
    // Copy configuration to clipboard
    copyBtn.addEventListener('click', function() {
        configScript.select();
        document.execCommand('copy');
        
        // Show feedback
        const originalText = copyBtn.textContent;
        copyBtn.textContent = 'Copied!';
        setTimeout(() => {
            copyBtn.textContent = originalText;
        }, 2000);
    });
    
    // Generate the configuration based on form inputs
    function generateConfiguration() {
        // Get form values
        const hostname = document.getElementById('hostname').value || 'Router';
        const disableDns = document.getElementById('disableDns').value === 'yes';
        const encryptPasswords = document.getElementById('encryptPasswords').value === 'yes';
        const enableSecret = document.getElementById('enableSecret').value;
        const minPasswordLength = document.getElementById('minPasswordLength').value;
        const bannerMessage = document.getElementById('bannerMessage').value;
        const consolePassword = document.getElementById('consolePassword').value;
        const consoleTimeout = document.getElementById('consoleTimeout').value;
        const vtyPassword = document.getElementById('vtyPassword').value;
        const vtyTimeout = document.getElementById('vtyTimeout').value;
        
        // Build configuration script
        let config = '';
        
        // Add header
        config += '! -----------------------------------------\n';
        config += '! Device Configuration Template\n';
        config += '! Generated by SSemblr\n';
        config += '! -----------------------------------------\n\n';
        
        // Basic configuration
        config += 'enable\n';
        config += 'configure terminal\n\n';
        
        // Hostname
        config += `hostname ${hostname}\n`;
        
        // DNS lookup
        if (disableDns) {
            config += 'no ip domain-lookup\n';
        }
        
        // Password encryption
        if (encryptPasswords) {
            config += 'service password-encryption\n';
        }
        
        // Enable secret
        if (enableSecret) {
            config += `enable secret ${enableSecret}\n`;
        }
        
        // Minimum password length
        if (minPasswordLength) {
            config += `security passwords min-length ${minPasswordLength}\n`;
        }
        
        // Banner message
        if (bannerMessage) {
            config += `banner motd #\n${bannerMessage}\n#\n`;
        }
        
        // Console configuration
        if (consolePassword) {
            config += '\nline console 0\n';
            config += ` password ${consolePassword}\n`;
            config += ' login\n';
            
            if (consoleTimeout) {
                config += ` exec-timeout ${consoleTimeout} 0\n`;
            }
            
            config += 'exit\n';
        }
        
        // VTY configuration
        if (vtyPassword) {
            config += '\nline vty 0 15\n';
            config += ` password ${vtyPassword}\n`;
            config += ' login\n';
            
            if (vtyTimeout) {
                config += ` exec-timeout ${vtyTimeout} 0\n`;
            }
            
            config += 'exit\n';
        }
        
        // End configuration
        config += '\nend\n';
        config += 'write memory\n';
        
        return config;
    }
}); 